{"version":3,"sources":["store/ducks/planner/plannerConstants.js","components/RoutePlan.js","App.js","store/ducks/planner/plannerActions.js","store/rootReducer.js","store/ducks/planner/plannerReducer.js","store/store.js","index.js"],"names":["PLANNER_REQUEST","PLANNER_SUCCESS","PLANNER_FAIL","RoutePlan","HSLAddress","planQuery","planner","useSelector","state","routPlans","loading","error","CircularProgress","legs","map","obj","className","mode","to","name","App","dispatch","useDispatch","useState","routeData","setRouteData","originData","setOriginData","destinationData","setDestinationData","currentDate","Date","date","getFullYear","getMonth","getDate","currentTime","time","getHours","getMinutes","getSeconds","a","axios","get","originAddress","originLocation","data","bbox","destinationAddress","destinationLocation","getAddress","type","post","query","payload","plan","itineraries","message","TextField","id","label","variant","onChange","e","currentTarget","value","Button","onClick","rootReducer","combineReducers","action","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a19bae6b.chunk.js","sourcesContent":["export const PLANNER_REQUEST = 'PLANNER_REQUEST';\r\nexport const PLANNER_SUCCESS = 'PLANNER_SUCCESS';\r\nexport const PLANNER_FAIL = 'PLANNER_FAIL';","import React from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport WalkIcon from '@material-ui/icons/DirectionsWalkOutlined';\r\nimport TramIcon from '@material-ui/icons/TramOutlined';\r\nimport SubwayIcon from '@material-ui/icons/DirectionsSubwayOutlined';\r\nimport BusIcon from '@material-ui/icons/DirectionsBusOutlined';\r\nimport RailIcon from '@material-ui/icons/DirectionsRailwayOutlined';\r\nimport BoatIcon from '@material-ui/icons/DirectionsBoatOutlined';\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n// Component for route plan\r\nfunction RoutePlan() {\r\n\r\n    const planner = useSelector( (state) => state.planner);\r\n    const { routPlans, loading, error } = planner;\r\n\r\n    return (\r\n        \r\n        loading? <div><CircularProgress /></div> :\r\n        error? <div>{error}</div> :\r\n        <div>    \r\n            {routPlans[0].legs.map(obj =>\r\n              <div className=\"output-plan-stops\">\r\n                {obj.mode === \"WALK\" ? <div className=\"output-walk\"><WalkIcon/> {obj.to.name}</div> : \r\n                obj.mode === \"TRAM\" ? <div className=\"output-tram\"><TramIcon/> {obj.to.name}</div> : \r\n                obj.mode === \"BUS\" ? <div className=\"output-bus\"><BusIcon/> {obj.to.name}</div>: \r\n                obj.mode === \"FERRY\" ? <div className=\"output-boat\"><BoatIcon/> {obj.to.name}</div> : \r\n                obj.mode === \"RAIL\" ? <div className=\"output-rail\"><RailIcon/> {obj.to.name}</div> : \r\n                obj.mode === \"SUBWAY\" ? <div className=\"output-subway\"><SubwayIcon/> {obj.to.name}</div> : \r\n                obj.mode}\r\n              </div>\r\n            )}  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RoutePlan;","import { useState } from 'react';\nimport { BrowserRouter, Link } from \"react-router-dom\";\nimport { useDispatch } from 'react-redux';\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { transportList } from \"./store/ducks/planner/plannerActions\";\nimport RoutePlan from './components/RoutePlan';\nimport axios from 'axios';\n\n// Simple solution for requesting latitude and longitude according to address input from HSL's geolocation API and requesting public transport route plan according to address.\n// I encountered a problem with executing address HTTP requests at same time with route plan request in actions, didn't found quick solution, so here is simple solution of task.\n// Problem was that all actions were executed at same time, so route planner action didn't get address before execution.\n// Correct way to implement this task would probably be to create reducer, action, etc... for each request.\n// Additionally didn't found solution how to convert HSL offered time format (\"startTime\": 1616328990000,) to readable time format. \n// Current implementation getting route plan only accordig to current time.\n\nexport let HSLAddress;\nexport let planQuery;\n\nfunction App() {\n\n  const dispatch = useDispatch();\n  const [routeData, setRouteData] = useState();\n  const [originData, setOriginData] = useState();\n  const [destinationData, setDestinationData] = useState();\n\n  const handleOriginInput = (e) => {\n    if (e.currentTarget) {\n      setOriginData(e.currentTarget.value);\n    }\n  }\n\n  const handleDestinationInput = (e) => {\n    if (e.currentTarget) {\n      setDestinationData(e.currentTarget.value);\n    }\n  }\n\n  // Get current time\n  const currentDate = new Date();\n  const date = currentDate.getFullYear() + '-' + (currentDate.getMonth() + 1) + '-' + currentDate.getDate();\n\n  const currentTime = new Date();\n  const time = currentTime.getHours() + ':' + currentTime.getMinutes() + ':' + currentTime.getSeconds();\n\n  // Requesting geolocation for both inputs and adding them to query\n  // Search radius is Helsinki, Vantaa, Espoo regions\n  if (originData && destinationData) {\n    const getAddress = async () => {\n      const originAddress = await axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${originData}&boundary.circle.lat=60.2&boundary.circle.lon=24.936&boundary.circle.radius=30`);\n      const originLocation = originAddress.data.bbox[1] + ',' + originAddress.data.bbox[0];\n\n      const destinationAddress = await axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${destinationData}&boundary.circle.lat=60.2&boundary.circle.lon=24.936&boundary.circle.radius=30`);\n      const destinationLocation = destinationAddress.data.bbox[1] + ',' + destinationAddress.data.bbox[0];\n\n      HSLAddress = \"https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql\";\n      planQuery = `\n  {\n      plan(\n        fromPlace: \"${originLocation}\",\n        toPlace: \"${destinationLocation}\",\n        date: \"${date}\",\n        time: \"${time}\",\n      numItineraries: 1,\n      ) {\n      itineraries{\n          walkDistance\n          duration\n          legs {\n          mode\n          startTime\n          endTime\n          from {\n              name\n          }\n          to {\n              name\n          }\n          }\n      }\n      }\n  }\n  `;\n    }\n    getAddress();\n  }\n\n  if (routeData) {\n    dispatch(transportList());\n \n  }\n\n  return (\n    <BrowserRouter>\n      <div className=\"grid-container\">\n        <header className=\"header\">\n          <div className=\"page-name\">\n            <Link to=\"/\">HSL Public Transport Route Planner</Link>\n          </div>\n        </header>\n        <main className=\"main\">\n          <div className=\"content\">\n            <div>\n              <TextField className=\"input-origin\" id=\"origin\" label=\"Origin\" variant=\"outlined\" onChange={handleOriginInput} />\n            </div>\n            <div>\n              <TextField className=\"input-destination\" id=\"destination\" label=\"Destination\" variant=\"outlined\" onChange={handleDestinationInput} />\n            </div>\n          </div>\n          <div className=\"button-search\">\n            <div>\n              <Button variant=\"contained\" onClick={() => setRouteData(<RoutePlan />)}>\n                Search\n              </Button>\n            </div>\n          </div>\n          <div className=\"output-plan\">\n            {routeData}\n          </div>\n        </main>\n        <footer className=\"footer\">\n          All rights reserved.\n        </footer>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\r\nimport { HSLAddress, planQuery } from '../../../App';\r\nimport { PLANNER_FAIL, PLANNER_REQUEST, PLANNER_SUCCESS } from './plannerConstants';\r\n\r\nconst transportList = () => async (dispatch) => {\r\n    try {\r\n         dispatch({ type: PLANNER_REQUEST });\r\n        const { data } = await axios.post(HSLAddress, {query: planQuery});\r\n        dispatch({ type: PLANNER_SUCCESS, payload: data.data.plan.itineraries }); \r\n    }\r\n    catch (error) {\r\n        dispatch({ type: PLANNER_FAIL, payload: error.message });\r\n    }\r\n};\r\n\r\nexport { transportList }","import { combineReducers } from \"redux\";\r\nimport { plannerReducer } from \"./ducks/planner/plannerReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    planner: plannerReducer,\r\n});","import { PLANNER_FAIL, PLANNER_REQUEST, PLANNER_SUCCESS } from './plannerConstants';\r\n\r\nfunction plannerReducer(state = { routPlans: [] }, action) {\r\n\r\n    switch (action.type) {\r\n        case PLANNER_REQUEST:\r\n            return { loading: true };\r\n        case PLANNER_SUCCESS:\r\n            return { loading: false, routPlans: action.payload };\r\n        case PLANNER_FAIL:\r\n            return { loading: false, error: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport { plannerReducer }","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { rootReducer } from \"./rootReducer\";\r\n\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}